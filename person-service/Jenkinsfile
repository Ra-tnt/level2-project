pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    service_name: person-service
    service_type: REST
spec:
  containers:
  - name: dnd
    image: docker:latest
    command: 
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docker-sock
    env:
        - name: DOCKER_USERNAME
          valueFrom:
            secretKeyRef:
              name: mysecret
              key: username
        - name: DOCKER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysecret
              key: password
  - name: kubectl
    image: bryandollery/terraform-packer-aws-alpine
    command:
    - cat
    tty: true
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock  
      type: Socket
"""
    }
  }
  environment {
    DOCKER_NAMESPACE = 'ma404'
    SERVICE_NAME = 'person-service'
    TOKEN=credentials('aaa56c9d-0604-484c-b5ca-ed1b5ce3288c')
  }
  stages {
      stage("Build") {
        when {
                changeset "**/person-service/**"
            }
          steps {
              container('dnd') {
                  sh '''
                      cd $SERVICE_NAME
                      docker build --tag $DOCKER_NAMESPACE/$SERVICE_NAME .
                  '''
              }
          }
      }
      stage("Release") {
        when {
                changeset "**/person-service/**"
            }
          steps {
              container('dnd') {
                  sh '''
                      docker login -p $DOCKER_PASSWORD -u $DOCKER_USERNAME
                      docker push $DOCKER_NAMESPACE/$SERVICE_NAME
                  '''
              }
          }
      }
      stage("Deploy") {
        when {
                changeset "**/person-service/**"
            }
          steps {
              container('kubectl') {
                  sh '''
                      cd $SERVICE_NAME
                      kubectl --token=$TOKEN -n theta apply -f deploy.yaml -f service.yaml
                  '''
              }
          }
      }
  }
}
